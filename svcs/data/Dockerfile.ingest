# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#The file starts by using a cbl mariner base for its image.
#CBL Mariner is a linux OS developed my Microsoft and is used primarily in Azure, WSL, and other Microsoft systems, and since we are using Azure, here we are.
#It then tries to make the directories ingest and staging (tdnf is the package manager for Photon OS), and tries to install python and some extensions into staging.
#Note that this step is where we are running into bugs, so it would be helpful if someone could find a solution to this.
#It then creates a new image also using cbl, this image is supposed to import osm tiles into the database using imposm3.
#Finally, it creates the cbl image "final" based on the distroless image, which is a minimalist image compared to "base".
#This image copies something from the ingest and staging image (TODO: Figure out what and why).
#It copies several files onto the image (TODO:Figure out why it imports what it does).
#Finally, it runs a command which removes .pbf files (an osm tile repackaged into a format for the importer to be able to read).
#As well as cached titles, expired tiles, and diff tiles. It then runs a command which imports tiles into the database. See imposm3 or the readme for more details.
FROM mcr.microsoft.com/cbl-mariner/base/core:2.0 as installer

RUN mkdir /ingest \
 && chmod 777 /ingest \
 && ls -lah /

RUN tdnf -y update \
 && tdnf install -y dnf \
 && mkdir /staging \
 && dnf install -y --release=2.0 --installroot /staging prebuilt-ca-certificates wget python3 python3-pip python3-setuptools

FROM mcr.microsoft.com/cbl-mariner/base/core:2.0 as imposm

ENV IMPOSM_BINARY_RELEASE=0.11.1

RUN tdnf -y update \
 && tdnf install -y ca-certificates-microsoft wget tar gzip \
 && mkdir -p /ingest/imposm3 \
 && wget -q -O - https://github.com/omniscale/imposm3/releases/download/v$IMPOSM_BINARY_RELEASE/imposm-$IMPOSM_BINARY_RELEASE-linux-x86-64.tar.gz | tar -xz --strip-components=1 -C /ingest/imposm3

FROM mcr.microsoft.com/cbl-mariner/distroless/base:2.0 as final

ENV PYTHONUNBUFFERED=true INGEST=/ingest TILES=/tiles MAPPING=/mapping UPDATE_FREQUENCY=minute

COPY --from=imposm /ingest/ $INGEST/
COPY --from=installer /staging/ /

COPY requirements.txt requirements_kubernetes.txt ingest.py kubescape.py tileperf.py queryperf.py extracts.json postgis-vt-util.sql tilefunc.sql $INGEST/

RUN /usr/bin/pip3 install -r $INGEST/requirements.txt -r $INGEST/requirements_kubernetes.txt

CMD  rm -f $TILES/*.pbf && rm -rf $TILES/imposm_cache $TILES/imposm_expired $TILES/imposm_diff && \
    python3 $INGEST/ingest.py --imposm $INGEST/imposm3/imposm --mapping $MAPPING/mapping.yml --where $GEN_REGIONS --extracts $INGEST/extracts.json --cachedir $TILES/imposm_cache  --diffdir $TILES/imposm_diff --pbfdir $TILES --expiredir $TILES/imposm_expired --verbose --updatemodel importloop --delay $LOOP_TIME --telemetry $INGEST_FLAGS
